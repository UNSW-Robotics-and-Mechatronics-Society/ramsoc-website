name: PR Validation

on:
  pull_request:
    types:
      [
        opened,
        edited,
        reopened,
        synchronize,
        labeled,
        unlabeled,
        assigned,
        unassigned,
      ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR metadata and title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prTitle = pr.title;
            const labels = pr.labels.map(label => label.name);
            const assignees = pr.assignees;

            const titleRegex = /^(feat|fix|docs|style|refactor|perf|test|chore)(\([^)]+\))?: .+$/;
            let errors = [];

            if (!titleRegex.test(prTitle)) {
              errors.push("❌ The PR title should follow this format: `<type> <optional-issue>: <description>`\n\nExamples:\n- `feat: add user login`\n- `fix(auth): handle expired token`");
            }

            if (labels.length === 0) {
              errors.push("❌ PR must have at least one label.");
            }

            if (assignees.length === 0) {
              errors.push("❌ PR must have at least one assignee.");
            }

            const marker = "<!-- pr-validation-comment -->";
            const commentBody = marker + "\n" + (
              errors.length > 0
              ? errors.join("\n\n") + "\n\nPlease update the PR to pass validation."
              : "✅ All PR validation checks passed."
            );

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });

            const botComment = comments.find(c => c.body?.includes(marker) && c.user.type === "Bot");

            if (botComment) {
              await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody,
              });
              console.log("Updated existing validation comment");
            } else {
              await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: commentBody,
              });
              console.log("Created new validation comment");
            }

            if (errors.length > 0) {
              core.setFailed("PR validation failed");
            } else {
              console.log("All PR validation checks passed.");
            }
